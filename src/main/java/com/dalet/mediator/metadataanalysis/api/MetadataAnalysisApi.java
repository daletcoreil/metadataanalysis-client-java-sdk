/*
 * Dalet Metadata Analysis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: cortexsupport@dalet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dalet.mediator.metadataanalysis.api;

import com.dalet.mediator.metadataanalysis.ApiCallback;
import com.dalet.mediator.metadataanalysis.ApiClient;
import com.dalet.mediator.metadataanalysis.ApiException;
import com.dalet.mediator.metadataanalysis.ApiResponse;
import com.dalet.mediator.metadataanalysis.Configuration;
import com.dalet.mediator.metadataanalysis.Pair;
import com.dalet.mediator.metadataanalysis.ProgressRequestBody;
import com.dalet.mediator.metadataanalysis.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.dalet.mediator.metadataanalysis.model.AnalyzeRequest;
import com.dalet.mediator.metadataanalysis.model.AnalyzedTextResponse;
import com.dalet.mediator.metadataanalysis.model.KnowledgeGraphSearchResponse;
import com.dalet.mediator.metadataanalysis.model.TranslateTextRequest;
import com.dalet.mediator.metadataanalysis.model.TranslateTextResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataAnalysisApi {
    private ApiClient localVarApiClient;

    public MetadataAnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataAnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for analyze
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param analyzeRequest Text to be analyzed and list of requested analysis methods. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeCall(String projectServiceId, AnalyzeRequest analyzeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = analyzeRequest;

        // create path and map variables
        String localVarPath = "/metadata-analysis/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (projectServiceId != null) {
            localVarHeaderParams.put("ProjectServiceId", localVarApiClient.parameterToString(projectServiceId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeValidateBeforeCall(String projectServiceId, AnalyzeRequest analyzeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectServiceId' is set
        if (projectServiceId == null) {
            throw new ApiException("Missing the required parameter 'projectServiceId' when calling analyze(Async)");
        }
        
        // verify the required parameter 'analyzeRequest' is set
        if (analyzeRequest == null) {
            throw new ApiException("Missing the required parameter 'analyzeRequest' when calling analyze(Async)");
        }
        

        okhttp3.Call localVarCall = analyzeCall(projectServiceId, analyzeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Perform metadata analysis on the provided text.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param analyzeRequest Text to be analyzed and list of requested analysis methods. (required)
     * @return AnalyzedTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzedTextResponse analyze(String projectServiceId, AnalyzeRequest analyzeRequest) throws ApiException {
        ApiResponse<AnalyzedTextResponse> localVarResp = analyzeWithHttpInfo(projectServiceId, analyzeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Perform metadata analysis on the provided text.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param analyzeRequest Text to be analyzed and list of requested analysis methods. (required)
     * @return ApiResponse&lt;AnalyzedTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzedTextResponse> analyzeWithHttpInfo(String projectServiceId, AnalyzeRequest analyzeRequest) throws ApiException {
        okhttp3.Call localVarCall = analyzeValidateBeforeCall(projectServiceId, analyzeRequest, null);
        Type localVarReturnType = new TypeToken<AnalyzedTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Perform metadata analysis on the provided text.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param analyzeRequest Text to be analyzed and list of requested analysis methods. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeAsync(String projectServiceId, AnalyzeRequest analyzeRequest, final ApiCallback<AnalyzedTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeValidateBeforeCall(projectServiceId, analyzeRequest, _callback);
        Type localVarReturnType = new TypeToken<AnalyzedTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgeGraphSearch
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param ids Query knowledge graph ids (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgeGraphSearchCall(String projectServiceId, List<String> ids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata-analysis/knowledge-graph-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (projectServiceId != null) {
            localVarHeaderParams.put("ProjectServiceId", localVarApiClient.parameterToString(projectServiceId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgeGraphSearchValidateBeforeCall(String projectServiceId, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectServiceId' is set
        if (projectServiceId == null) {
            throw new ApiException("Missing the required parameter 'projectServiceId' when calling knowledgeGraphSearch(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling knowledgeGraphSearch(Async)");
        }
        

        okhttp3.Call localVarCall = knowledgeGraphSearchCall(projectServiceId, ids, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get information for given knowledge graph ids. Knowledge graph ids are returned by the entities extractor of the analyzed method. This returns detailed information on an entity including image and description.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param ids Query knowledge graph ids (required)
     * @return KnowledgeGraphSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public KnowledgeGraphSearchResponse knowledgeGraphSearch(String projectServiceId, List<String> ids) throws ApiException {
        ApiResponse<KnowledgeGraphSearchResponse> localVarResp = knowledgeGraphSearchWithHttpInfo(projectServiceId, ids);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information for given knowledge graph ids. Knowledge graph ids are returned by the entities extractor of the analyzed method. This returns detailed information on an entity including image and description.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param ids Query knowledge graph ids (required)
     * @return ApiResponse&lt;KnowledgeGraphSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KnowledgeGraphSearchResponse> knowledgeGraphSearchWithHttpInfo(String projectServiceId, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = knowledgeGraphSearchValidateBeforeCall(projectServiceId, ids, null);
        Type localVarReturnType = new TypeToken<KnowledgeGraphSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information for given knowledge graph ids. Knowledge graph ids are returned by the entities extractor of the analyzed method. This returns detailed information on an entity including image and description.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param ids Query knowledge graph ids (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgeGraphSearchAsync(String projectServiceId, List<String> ids, final ApiCallback<KnowledgeGraphSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgeGraphSearchValidateBeforeCall(projectServiceId, ids, _callback);
        Type localVarReturnType = new TypeToken<KnowledgeGraphSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateText
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param translateTextRequest Request which contains the needed information for the translate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateTextCall(String projectServiceId, TranslateTextRequest translateTextRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = translateTextRequest;

        // create path and map variables
        String localVarPath = "/metadata-analysis/translate-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (projectServiceId != null) {
            localVarHeaderParams.put("ProjectServiceId", localVarApiClient.parameterToString(projectServiceId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateTextValidateBeforeCall(String projectServiceId, TranslateTextRequest translateTextRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectServiceId' is set
        if (projectServiceId == null) {
            throw new ApiException("Missing the required parameter 'projectServiceId' when calling translateText(Async)");
        }
        
        // verify the required parameter 'translateTextRequest' is set
        if (translateTextRequest == null) {
            throw new ApiException("Missing the required parameter 'translateTextRequest' when calling translateText(Async)");
        }
        

        okhttp3.Call localVarCall = translateTextCall(projectServiceId, translateTextRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Translate a given text to a target language.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param translateTextRequest Request which contains the needed information for the translate operation. (required)
     * @return TranslateTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public TranslateTextResponse translateText(String projectServiceId, TranslateTextRequest translateTextRequest) throws ApiException {
        ApiResponse<TranslateTextResponse> localVarResp = translateTextWithHttpInfo(projectServiceId, translateTextRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Translate a given text to a target language.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param translateTextRequest Request which contains the needed information for the translate operation. (required)
     * @return ApiResponse&lt;TranslateTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslateTextResponse> translateTextWithHttpInfo(String projectServiceId, TranslateTextRequest translateTextRequest) throws ApiException {
        okhttp3.Call localVarCall = translateTextValidateBeforeCall(projectServiceId, translateTextRequest, null);
        Type localVarReturnType = new TypeToken<TranslateTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Translate a given text to a target language.
     * @param projectServiceId Project service id of the client associated to the request (required)
     * @param translateTextRequest Request which contains the needed information for the translate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization request fail </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed request.  Reason is most likely quota violation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateTextAsync(String projectServiceId, TranslateTextRequest translateTextRequest, final ApiCallback<TranslateTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateTextValidateBeforeCall(projectServiceId, translateTextRequest, _callback);
        Type localVarReturnType = new TypeToken<TranslateTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * Dalet Metadata Analysis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: cortexsupport@dalet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dalet.mediator.metadataanalysis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ClassifierCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-04T14:41:39.145+08:00[GMT+08:00]")
public class ClassifierCategory {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets classifierId
   */
  @JsonAdapter(ClassifierIdEnum.Adapter.class)
  public enum ClassifierIdEnum {
    IPTCNEWSCODES("IPTCNewsCodes"),
    
    IPTCMEDIATOPICS("IPTCMediaTopics"),
    
    IABTAXONOMY("IABTaxonomy");

    private String value;

    ClassifierIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassifierIdEnum fromValue(String value) {
      for (ClassifierIdEnum b : ClassifierIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassifierIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassifierIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassifierIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassifierIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFIER_ID = "classifierId";
  @SerializedName(SERIALIZED_NAME_CLASSIFIER_ID)
  private ClassifierIdEnum classifierId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private java.lang.Double score;


  public ClassifierCategory id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ClassifierCategory classifierId(ClassifierIdEnum classifierId) {
    
    this.classifierId = classifierId;
    return this;
  }

   /**
   * Get classifierId
   * @return classifierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClassifierIdEnum getClassifierId() {
    return classifierId;
  }


  public void setClassifierId(ClassifierIdEnum classifierId) {
    this.classifierId = classifierId;
  }


  public ClassifierCategory categoryId(String categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ClassifierCategory label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public ClassifierCategory score(java.lang.Double score) {
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public java.lang.Double getScore() {
    return score;
  }


  public void setScore(java.lang.Double score) {
    this.score = score;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassifierCategory classifierCategory = (ClassifierCategory) o;
    return Objects.equals(this.id, classifierCategory.id) &&
        Objects.equals(this.classifierId, classifierCategory.classifierId) &&
        Objects.equals(this.categoryId, classifierCategory.categoryId) &&
        Objects.equals(this.label, classifierCategory.label) &&
        Objects.equals(this.score, classifierCategory.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, classifierId, categoryId, label, score);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassifierCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classifierId: ").append(toIndentedString(classifierId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


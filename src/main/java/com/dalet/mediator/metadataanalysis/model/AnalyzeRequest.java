/*
 * Dalet Metadata Analysis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: cortexsupport@dalet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dalet.mediator.metadataanalysis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Text to be analyzed and requested analysis methods. if not specified all analyses are executed.
 */
@ApiModel(description = "Text to be analyzed and requested analysis methods. if not specified all analyses are executed.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-03T19:24:04.607+08:00[GMT+08:00]")
public class AnalyzeRequest {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * Gets or Sets extractors
   */
  @JsonAdapter(ExtractorsEnum.Adapter.class)
  public enum ExtractorsEnum {
    ENTITIES("entities"),
    
    TOPICS("topics");

    private String value;

    ExtractorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExtractorsEnum fromValue(String value) {
      for (ExtractorsEnum b : ExtractorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExtractorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExtractorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExtractorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExtractorsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXTRACTORS = "extractors";
  @SerializedName(SERIALIZED_NAME_EXTRACTORS)
  private List<ExtractorsEnum> extractors = null;

  public static final String SERIALIZED_NAME_EXTRACTORS_SCORE_THRESHOLD = "extractorsScoreThreshold";
  @SerializedName(SERIALIZED_NAME_EXTRACTORS_SCORE_THRESHOLD)
  private java.lang.Double extractorsScoreThreshold;

  /**
   * Gets or Sets classifiers
   */
  @JsonAdapter(ClassifiersEnum.Adapter.class)
  public enum ClassifiersEnum {
    IPTCNEWSCODES("IPTCNewsCodes"),
    
    IPTCMEDIATOPICS("IPTCMediaTopics"),
    
    IABTAXONOMY("IABTaxonomy");

    private String value;

    ClassifiersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassifiersEnum fromValue(String value) {
      for (ClassifiersEnum b : ClassifiersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassifiersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassifiersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassifiersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassifiersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFIERS = "classifiers";
  @SerializedName(SERIALIZED_NAME_CLASSIFIERS)
  private List<ClassifiersEnum> classifiers = null;

  public static final String SERIALIZED_NAME_CLASSIFIER_SCORE_THRESHOLD = "classifierScoreThreshold";
  @SerializedName(SERIALIZED_NAME_CLASSIFIER_SCORE_THRESHOLD)
  private java.lang.Double classifierScoreThreshold;


  public AnalyzeRequest text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Up to 200kb of UTF-8 encoded raw text to be analyzed. The language is detected automatically and it should be one of the following: English (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Russian (ru), Spanish (es)
   * @return text
  **/
  @ApiModelProperty(required = true, value = "Up to 200kb of UTF-8 encoded raw text to be analyzed. The language is detected automatically and it should be one of the following: English (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Russian (ru), Spanish (es)")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public AnalyzeRequest extractors(List<ExtractorsEnum> extractors) {
    
    this.extractors = extractors;
    return this;
  }

  public AnalyzeRequest addExtractorsItem(ExtractorsEnum extractorsItem) {
    if (this.extractors == null) {
      this.extractors = new ArrayList<ExtractorsEnum>();
    }
    this.extractors.add(extractorsItem);
    return this;
  }

   /**
   * Extractors detect spans in the text and return their normalized description.
   * @return extractors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extractors detect spans in the text and return their normalized description.")

  public List<ExtractorsEnum> getExtractors() {
    return extractors;
  }


  public void setExtractors(List<ExtractorsEnum> extractors) {
    this.extractors = extractors;
  }


  public AnalyzeRequest extractorsScoreThreshold(java.lang.Double extractorsScoreThreshold) {
    
    this.extractorsScoreThreshold = extractorsScoreThreshold;
    return this;
  }

   /**
   * Only return extractors results with score above the threshold between 0 and 1. if not specified return all results.
   * @return extractorsScoreThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only return extractors results with score above the threshold between 0 and 1. if not specified return all results.")

  public java.lang.Double getExtractorsScoreThreshold() {
    return extractorsScoreThreshold;
  }


  public void setExtractorsScoreThreshold(java.lang.Double extractorsScoreThreshold) {
    this.extractorsScoreThreshold = extractorsScoreThreshold;
  }


  public AnalyzeRequest classifiers(List<ClassifiersEnum> classifiers) {
    
    this.classifiers = classifiers;
    return this;
  }

  public AnalyzeRequest addClassifiersItem(ClassifiersEnum classifiersItem) {
    if (this.classifiers == null) {
      this.classifiers = new ArrayList<ClassifiersEnum>();
    }
    this.classifiers.add(classifiersItem);
    return this;
  }

   /**
   * Classifiers categorize the whole text according to industry standard taxonomies.
   * @return classifiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Classifiers categorize the whole text according to industry standard taxonomies.")

  public List<ClassifiersEnum> getClassifiers() {
    return classifiers;
  }


  public void setClassifiers(List<ClassifiersEnum> classifiers) {
    this.classifiers = classifiers;
  }


  public AnalyzeRequest classifierScoreThreshold(java.lang.Double classifierScoreThreshold) {
    
    this.classifierScoreThreshold = classifierScoreThreshold;
    return this;
  }

   /**
   * Only return categories with score above the threshold between 0 and 1. if not specified return all detected categories.
   * @return classifierScoreThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only return categories with score above the threshold between 0 and 1. if not specified return all detected categories.")

  public java.lang.Double getClassifierScoreThreshold() {
    return classifierScoreThreshold;
  }


  public void setClassifierScoreThreshold(java.lang.Double classifierScoreThreshold) {
    this.classifierScoreThreshold = classifierScoreThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeRequest analyzeRequest = (AnalyzeRequest) o;
    return Objects.equals(this.text, analyzeRequest.text) &&
        Objects.equals(this.extractors, analyzeRequest.extractors) &&
        Objects.equals(this.extractorsScoreThreshold, analyzeRequest.extractorsScoreThreshold) &&
        Objects.equals(this.classifiers, analyzeRequest.classifiers) &&
        Objects.equals(this.classifierScoreThreshold, analyzeRequest.classifierScoreThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, extractors, extractorsScoreThreshold, classifiers, classifierScoreThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeRequest {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    extractors: ").append(toIndentedString(extractors)).append("\n");
    sb.append("    extractorsScoreThreshold: ").append(toIndentedString(extractorsScoreThreshold)).append("\n");
    sb.append("    classifiers: ").append(toIndentedString(classifiers)).append("\n");
    sb.append("    classifierScoreThreshold: ").append(toIndentedString(classifierScoreThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

